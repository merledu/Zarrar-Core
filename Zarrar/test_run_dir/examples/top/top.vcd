$version Generated by VerilatedVcd $end
$date Mon Oct 21 16:46:16 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 u clock $end
  $var wire 32 w io_output [31:0] $end
  $var wire  1 v reset $end
  $scope module top $end
   $var wire  5 < alu_io_AluControl [4:0] $end
   $var wire  1 @ alu_io_Branch $end
   $var wire 32 > alu_io_in1 [31:0] $end
   $var wire 32 ? alu_io_in2 [31:0] $end
   $var wire 32 A alu_io_out [31:0] $end
   $var wire  5 < alucontrol_io_ALUcont [4:0] $end
   $var wire  3 * alucontrol_io_ALUop [2:0] $end
   $var wire  3 : alucontrol_io_func3 [2:0] $end
   $var wire  1 ; alucontrol_io_func7 $end
   $var wire  1 u clock $end
   $var wire  3 * control_io_AluOp [2:0] $end
   $var wire  1 ' control_io_Branch $end
   $var wire  2 - control_io_ExtSel [1:0] $end
   $var wire  1 ( control_io_MemRead $end
   $var wire  1 & control_io_MemWrite $end
   $var wire  1 ( control_io_MemtoReg $end
   $var wire  2 . control_io_NextPc [1:0] $end
   $var wire  2 + control_io_OpA [1:0] $end
   $var wire  1 , control_io_OpB $end
   $var wire  1 ) control_io_RegWrite $end
   $var wire  7 % control_io_opcode [6:0] $end
   $var wire  1 u dataMem_clock $end
   $var wire  8 B dataMem_io_address [7:0] $end
   $var wire 32 C dataMem_io_dataOut [31:0] $end
   $var wire  1 ( dataMem_io_load $end
   $var wire  1 & dataMem_io_store $end
   $var wire 32 9 dataMem_io_storeData [31:0] $end
   $var wire 32 3 immediategen_io_i_imm [31:0] $end
   $var wire 32 $ immediategen_io_instruction [31:0] $end
   $var wire 32 R immediategen_io_pc [31:0] $end
   $var wire 32 / immediategen_io_s_imm [31:0] $end
   $var wire 32 0 immediategen_io_sb_imm [31:0] $end
   $var wire 32 2 immediategen_io_u_imm [31:0] $end
   $var wire 32 1 immediategen_io_uj_imm [31:0] $end
   $var wire  1 u insmem_clock $end
   $var wire 32 S insmem_io_address [31:0] $end
   $var wire 32 $ insmem_io_data [31:0] $end
   $var wire 32 w io_output [31:0] $end
   $var wire 32 3 jalr_io_a [31:0] $end
   $var wire 32 8 jalr_io_b [31:0] $end
   $var wire 32 = jalr_io_o [31:0] $end
   $var wire  1 u pc_clock $end
   $var wire 32 # pc_io_input [31:0] $end
   $var wire 32 Q pc_io_pc4 [31:0] $end
   $var wire 32 R pc_io_pcout [31:0] $end
   $var wire  1 u regfile_clock $end
   $var wire  5 4 regfile_io_rd [4:0] $end
   $var wire  1 ) regfile_io_regwrite $end
   $var wire 32 8 regfile_io_rs1 [31:0] $end
   $var wire  5 5 regfile_io_rs1s [4:0] $end
   $var wire 32 9 regfile_io_rs2 [31:0] $end
   $var wire  5 6 regfile_io_rs2s [4:0] $end
   $var wire 32 7 regfile_io_writedata [31:0] $end
   $var wire  1 v reset $end
   $scope module alu $end
    $var wire  5 < io_AluControl [4:0] $end
    $var wire  1 @ io_Branch $end
    $var wire 32 > io_in1 [31:0] $end
    $var wire 32 ? io_in2 [31:0] $end
    $var wire 32 A io_out [31:0] $end
   $upscope $end
   $scope module alucontrol $end
    $var wire  5 < io_ALUcont [4:0] $end
    $var wire  3 * io_ALUop [2:0] $end
    $var wire  3 : io_func3 [2:0] $end
    $var wire  1 ; io_func7 $end
   $upscope $end
   $scope module control $end
    $var wire  1 G c1_io_Branch $end
    $var wire  1 H c1_io_I $end
    $var wire  1 I c1_io_Jal $end
    $var wire  1 J c1_io_Jalr $end
    $var wire  1 E c1_io_Load $end
    $var wire  1 K c1_io_Lui $end
    $var wire  1 D c1_io_R $end
    $var wire  1 F c1_io_Store $end
    $var wire  7 % c1_io_opcode [6:0] $end
    $var wire  3 * c2_io_AluOp [2:0] $end
    $var wire  1 ' c2_io_Branch $end
    $var wire  1 G c2_io_Branch1 $end
    $var wire  2 - c2_io_ExtSel [1:0] $end
    $var wire  1 H c2_io_I $end
    $var wire  1 I c2_io_Jal $end
    $var wire  1 J c2_io_Jalr $end
    $var wire  1 E c2_io_Load $end
    $var wire  1 K c2_io_Lui $end
    $var wire  1 ( c2_io_MemRead $end
    $var wire  1 & c2_io_MemWrite $end
    $var wire  1 ( c2_io_MemtoReg $end
    $var wire  2 . c2_io_NextPc [1:0] $end
    $var wire  2 + c2_io_OpA [1:0] $end
    $var wire  1 , c2_io_OpB $end
    $var wire  1 D c2_io_R $end
    $var wire  1 ) c2_io_RegWrite $end
    $var wire  1 F c2_io_Store $end
    $var wire  3 * io_AluOp [2:0] $end
    $var wire  1 ' io_Branch $end
    $var wire  2 - io_ExtSel [1:0] $end
    $var wire  1 ( io_MemRead $end
    $var wire  1 & io_MemWrite $end
    $var wire  1 ( io_MemtoReg $end
    $var wire  2 . io_NextPc [1:0] $end
    $var wire  2 + io_OpA [1:0] $end
    $var wire  1 , io_OpB $end
    $var wire  1 ) io_RegWrite $end
    $var wire  7 % io_opcode [6:0] $end
    $scope module c1 $end
     $var wire  1 G io_Branch $end
     $var wire  1 H io_I $end
     $var wire  1 I io_Jal $end
     $var wire  1 J io_Jalr $end
     $var wire  1 E io_Load $end
     $var wire  1 K io_Lui $end
     $var wire  1 D io_R $end
     $var wire  1 F io_Store $end
     $var wire  7 % io_opcode [6:0] $end
    $upscope $end
    $scope module c2 $end
     $var wire  3 * io_AluOp [2:0] $end
     $var wire  1 ' io_Branch $end
     $var wire  1 G io_Branch1 $end
     $var wire  2 - io_ExtSel [1:0] $end
     $var wire  1 H io_I $end
     $var wire  1 I io_Jal $end
     $var wire  1 J io_Jalr $end
     $var wire  1 E io_Load $end
     $var wire  1 K io_Lui $end
     $var wire  1 ( io_MemRead $end
     $var wire  1 & io_MemWrite $end
     $var wire  1 ( io_MemtoReg $end
     $var wire  2 . io_NextPc [1:0] $end
     $var wire  2 + io_OpA [1:0] $end
     $var wire  1 , io_OpB $end
     $var wire  1 D io_R $end
     $var wire  1 ) io_RegWrite $end
     $var wire  1 F io_Store $end
    $upscope $end
   $upscope $end
   $scope module dataMem $end
    $var wire  1 u clock $end
    $var wire  8 B io_address [7:0] $end
    $var wire 32 C io_dataOut [31:0] $end
    $var wire  1 ( io_load $end
    $var wire  1 & io_store $end
    $var wire 32 9 io_storeData [31:0] $end
    $var wire 10 P mem__T_19_addr [9:0] $end
    $var wire 32 C mem__T_19_data [31:0] $end
    $var wire 10 P mem__T_22_addr [9:0] $end
    $var wire 32 9 mem__T_22_data [31:0] $end
    $var wire  1 & mem__T_22_en $end
    $var wire  1 x mem__T_22_mask $end
   $upscope $end
   $scope module immediategen $end
    $var wire 32 3 io_i_imm [31:0] $end
    $var wire 32 $ io_instruction [31:0] $end
    $var wire 32 R io_pc [31:0] $end
    $var wire 32 / io_s_imm [31:0] $end
    $var wire 32 0 io_sb_imm [31:0] $end
    $var wire 32 2 io_u_imm [31:0] $end
    $var wire 32 1 io_uj_imm [31:0] $end
    $var wire 12 L s_imm13 [11:0] $end
    $var wire 13 M sb_imm13 [12:0] $end
    $var wire 21 N uj_imm21 [20:0] $end
   $upscope $end
   $scope module insmem $end
    $var wire  1 u clock $end
    $var wire 32 S io_address [31:0] $end
    $var wire 32 $ io_data [31:0] $end
    $var wire 10 T mem__T_12_addr [9:0] $end
    $var wire 32 $ mem__T_12_data [31:0] $end
    $scope module BindsTo_0_insmem_Inst $end
     $var wire  1 u clock $end
     $var wire 32 S io_address [31:0] $end
     $var wire 32 $ io_data [31:0] $end
    $upscope $end
   $upscope $end
   $scope module jalr $end
    $var wire 32 O add [31:0] $end
    $var wire 32 3 io_a [31:0] $end
    $var wire 32 8 io_b [31:0] $end
    $var wire 32 = io_o [31:0] $end
   $upscope $end
   $scope module pc $end
    $var wire  1 u clock $end
    $var wire 32 # io_input [31:0] $end
    $var wire 32 Q io_pc4 [31:0] $end
    $var wire 32 R io_pcout [31:0] $end
    $var wire 32 R reg$ [31:0] $end
   $upscope $end
   $scope module regfile $end
    $var wire  1 u clock $end
    $var wire  5 4 io_rd [4:0] $end
    $var wire  1 ) io_regwrite $end
    $var wire 32 8 io_rs1 [31:0] $end
    $var wire  5 5 io_rs1s [4:0] $end
    $var wire 32 9 io_rs2 [31:0] $end
    $var wire  5 6 io_rs2s [4:0] $end
    $var wire 32 7 io_writedata [31:0] $end
    $var wire 32 U register_0 [31:0] $end
    $var wire 32 V register_1 [31:0] $end
    $var wire 32 _ register_10 [31:0] $end
    $var wire 32 ` register_11 [31:0] $end
    $var wire 32 a register_12 [31:0] $end
    $var wire 32 b register_13 [31:0] $end
    $var wire 32 c register_14 [31:0] $end
    $var wire 32 d register_15 [31:0] $end
    $var wire 32 e register_16 [31:0] $end
    $var wire 32 f register_17 [31:0] $end
    $var wire 32 g register_18 [31:0] $end
    $var wire 32 h register_19 [31:0] $end
    $var wire 32 W register_2 [31:0] $end
    $var wire 32 i register_20 [31:0] $end
    $var wire 32 j register_21 [31:0] $end
    $var wire 32 k register_22 [31:0] $end
    $var wire 32 l register_23 [31:0] $end
    $var wire 32 m register_24 [31:0] $end
    $var wire 32 n register_25 [31:0] $end
    $var wire 32 o register_26 [31:0] $end
    $var wire 32 p register_27 [31:0] $end
    $var wire 32 q register_28 [31:0] $end
    $var wire 32 r register_29 [31:0] $end
    $var wire 32 X register_3 [31:0] $end
    $var wire 32 s register_30 [31:0] $end
    $var wire 32 t register_31 [31:0] $end
    $var wire 32 Y register_4 [31:0] $end
    $var wire 32 Z register_5 [31:0] $end
    $var wire 32 [ register_6 [31:0] $end
    $var wire 32 \ register_7 [31:0] $end
    $var wire 32 ] register_8 [31:0] $end
    $var wire 32 ^ register_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000010000000000000100010011 $
b0010011 %
0&
0'
0(
1)
b001 *
b00 +
1,
b00 -
b00 .
b00000000000000000000000000000010 /
b00000000000000000000000000000010 0
b00000000000000000000000000000100 1
b00000000010000000000000000000000 2
b00000000000000000000000000000100 3
b00010 4
b00000 5
b00100 6
b00000000000000000000000000000100 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b000 :
0;
b00000 <
b00000000000000000000000000000100 =
b00000000000000000000000000000000 >
b00000000000000000000000000000100 ?
0@
b00000000000000000000000000000100 A
b00000001 B
b00000000000000000000000000000000 C
0D
0E
0F
0G
1H
0I
0J
0K
b000000000010 L
b0000000000010 M
b000000000000000000100 N
b00000000000000000000000000000100 O
b0000000001 P
b00000000000000000000000000000100 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b0000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
0u
1v
b00000000000000000000000000000100 w
1x
#1
b00000000000000000000000000001000 #
b00000000010100000000000110010011 $
b00000000000000000000000000000011 /
b00000000000000000000100000000110 0
b00000000000000000000100000001000 1
b00000000010100000000000000000000 2
b00000000000000000000000000000101 3
b00011 4
b00101 6
b00000000000000000000000000000101 7
b00000000000000000000000000000101 ?
b00000000000000000000000000000101 A
b000000000011 L
b0100000000010 M
b000000000100000000100 N
b00000000000000000000000000000101 O
b00000000000000000000000000001000 Q
b00000000000000000000000000000100 R
b00000000000000000000000000000001 S
b0000000001 T
b00000000000000000000000000000100 W
1u
b00000000000000000000000000000101 w
#2
0u
#3
b00000000000000000000000000011000 #
b00000001000000000000000011101111 $
b1101111 %
b011 *
b10 +
0,
b10 .
b00000000000000000000000000000001 /
b00000000000000000000100000001000 0
b00000000000000000000000000011000 1
b00000001000000000000000000000000 2
b00000000000000000000000000010000 3
b00001 4
b10000 6
b00000000000000000000000000001100 7
b11111 <
b00000000000000000000000000010000 =
b00000000000000000000000000001100 >
b00000000000000000000000000000000 ?
b00000000000000000000000000001100 A
b00000011 B
0H
1I
b000000000001 L
b0100000000000 M
b000000000000000010000 N
b00000000000000000000000000010000 O
b0000000011 P
b00000000000000000000000000001100 Q
b00000000000000000000000000001000 R
b00000000000000000000000000000010 S
b0000000010 T
b00000000000000000000000000000101 X
1u
b00000000000000000000000000001100 w
#4
0u
#5
b00000000000000000000000000011100 #
b01000000001100010000001000110011 $
b0110011 %
b000 *
b00 +
b00 .
b00000000000000000000010000000100 /
b00000000000000000000010000011100 0
b00000000000000010000110000011010 1
b01000000001100010000000000000000 2
b00000000000000000000010000000011 3
b00100 4
b00010 5
b00011 6
b11111111111111111111111111111111 7
b00000000000000000000000000000100 8
b00000000000000000000000000000101 9
1;
b01000 <
b00000000000000000000010000000110 =
b00000000000000000000000000000100 >
b00000000000000000000000000000101 ?
b11111111111111111111111111111111 A
b11111111 B
1D
0I
b010000000100 L
b0010000000100 M
b000010000110000000010 N
b00000000000000000000010000000111 O
b0011111111 P
b00000000000000000000000000011100 Q
b00000000000000000000000000011000 R
b00000000000000000000000000000110 S
b0000000110 T
b00000000000000000000000000001100 V
1u
b11111111111111111111111111111111 w
#6
0u
#7
b00000000000000000000000000001100 #
b00000000000000001000000001100111 $
b1100111 %
b011 *
b10 +
b11 .
b00000000000000000000000000000000 /
b00000000000000000000000000011100 0
b00000000000000001000000000011100 1
b00000000000000001000000000000000 2
b00000000000000000000000000000000 3
b00000 4
b00001 5
b00000 6
b00000000000000000000000000100000 7
b00000000000000000000000000001100 8
b00000000000000000000000000000000 9
0;
b11111 <
b00000000000000000000000000001100 =
b00000000000000000000000000100000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000100000 A
b00001000 B
0D
1J
b000000000000 L
b0000000000000 M
b000001000000000000000 N
b00000000000000000000000000001100 O
b0000001000 P
b00000000000000000000000000100000 Q
b00000000000000000000000000011100 R
b00000000000000000000000000000111 S
b0000000111 T
b11111111111111111111111111111111 Y
1u
b00000000000000000000000000100000 w
#8
0u
#9
b00000000000000000000000000010000 #
b00000000010000000010001000100011 $
b0100011 %
1&
0)
b101 *
b00 +
1,
b10 -
b00 .
b00000000000000000000000000000100 /
b00000000000000000000000000010000 0
b00000000000000000010000000010000 1
b00000000010000000010000000000000 2
b00000000000000000000000000000100 3
b00100 4
b00000 5
b00100 6
b00000000000000000000000000000100 7
b00000000000000000000000000000000 8
b11111111111111111111111111111111 9
b010 :
b00000 <
b00000000000000000000000000000100 =
b00000000000000000000000000000000 >
b00000000000000000000000000000100 ?
b00000000000000000000000000000100 A
b00000001 B
1F
0J
b000000000100 L
b0000000000100 M
b000000010000000000100 N
b00000000000000000000000000000100 O
b0000000001 P
b00000000000000000000000000010000 Q
b00000000000000000000000000001100 R
b00000000000000000000000000000011 S
b0000000011 T
1u
b00000000000000000000000000000100 w
#10
0u
0v
#11
b00000000000000000000000000010100 #
b00000000010000000010001010000011 $
b0000011 %
0&
1(
1)
b100 *
b00 -
b00000000000000000000000000000101 /
b00000000000000000000100000010100 0
b00000000000000000010000000010100 1
b00101 4
b11111111111111111111111111111111 7
b11111111111111111111111111111111 C
1E
0F
b000000000101 L
b0100000000100 M
b00000000000000000000000000010100 Q
b00000000000000000000000000010000 R
b00000000000000000000000000000100 S
b0000000100 T
1u
#12
0u
#13
b00000000000000000000000000100000 #
b00000000010100100000011001100011 $
b1100011 %
1'
0(
0)
b010 *
0,
b01 .
b00000000000000000000000000001100 /
b00000000000000000000000000100000 0
b00000000000000100000100000011000 1
b00000000010100100000000000000000 2
b00000000000000000000000000000101 3
b01100 4
b00100 5
b00101 6
b00000000000000000000000000000001 7
b11111111111111111111111111111111 8
b000 :
b10000 <
b11111111111111111111111111111111 >
b11111111111111111111111111111111 ?
1@
b00000000000000000000000000000001 A
b00000000 B
b00000000000000000000000000000000 C
0E
1G
b000000001100 L
b0000000001100 M
b000100000100000000100 N
b0000000000 P
b00000000000000000000000000011000 Q
b00000000000000000000000000010100 R
b00000000000000000000000000000101 S
b0000000101 T
b11111111111111111111111111111111 Z
1u
b00000000000000000000000000000001 w
#14
0u
#15
b00000000000000000000000000100100 #
b00000000000000000000000000000000 $
b0000000 %
0'
b111 *
b00 .
b00000000000000000000000000000000 /
b00000000000000000000000000100000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000 4
b00000 5
b00000 6
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
0G
b000000000000 L
b0000000000000 M
b000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000100100 Q
b00000000000000000000000000100000 R
b00000000000000000000000000001000 S
b0000001000 T
1u
#16
0u
#17
b00000000000000000000000000101000 #
b00000000000000000000000000100100 0
b00000000000000000000000000100100 1
b00000000000000000000000000101000 Q
b00000000000000000000000000100100 R
b00000000000000000000000000001001 S
b0000001001 T
1u
#18
0u
#19
b00000000000000000000000000101100 #
b00000000000000000000000000101000 0
b00000000000000000000000000101000 1
b00000000000000000000000000101100 Q
b00000000000000000000000000101000 R
b00000000000000000000000000001010 S
b0000001010 T
1u
