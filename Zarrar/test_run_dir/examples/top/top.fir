;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit top : 
  module pc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pcout : UInt<32>}
    
    reg reg : UInt, clock @[pc.scala 11:26]
    reg <= UInt<32>("h00") @[pc.scala 11:26]
    reg <= io.input @[pc.scala 12:13]
    node _T_14 = add(reg, UInt<3>("h04")) @[pc.scala 13:23]
    node _T_15 = tail(_T_14, 1) @[pc.scala 13:23]
    io.pc4 <= _T_15 @[pc.scala 13:16]
    io.pcout <= reg @[pc.scala 14:18]
    
  module insmem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip address : UInt<32>, data : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[insmem.scala 10:22]
    node _T_11 = bits(io.address, 9, 0) @[insmem.scala 11:23]
    infer mport _T_12 = mem[_T_11], clock @[insmem.scala 11:23]
    io.data <= _T_12 @[insmem.scala 11:17]
    
  module InstTypeDeco : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, R : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, I : UInt<1>, Jal : UInt<1>, Jalr : UInt<1>, Lui : UInt<1>}
    
    node _T_24 = eq(io.opcode, UInt<6>("h033")) @[InstTypeDeco.scala 18:25]
    when _T_24 : @[InstTypeDeco.scala 18:37]
      io.R <= UInt<1>("h01") @[InstTypeDeco.scala 19:22]
      io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 20:25]
      io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 21:26]
      io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 22:27]
      io.I <= UInt<1>("h00") @[InstTypeDeco.scala 23:22]
      io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 24:24]
      io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 25:25]
      io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 26:24]
      skip @[InstTypeDeco.scala 18:37]
    else : @[InstTypeDeco.scala 28:41]
      node _T_34 = eq(io.opcode, UInt<2>("h03")) @[InstTypeDeco.scala 28:30]
      when _T_34 : @[InstTypeDeco.scala 28:41]
        io.R <= UInt<1>("h00") @[InstTypeDeco.scala 29:22]
        io.Load <= UInt<1>("h01") @[InstTypeDeco.scala 30:25]
        io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 31:26]
        io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 32:27]
        io.I <= UInt<1>("h00") @[InstTypeDeco.scala 33:22]
        io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 34:24]
        io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 35:25]
        io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 36:24]
        skip @[InstTypeDeco.scala 28:41]
      else : @[InstTypeDeco.scala 38:42]
        node _T_44 = eq(io.opcode, UInt<6>("h023")) @[InstTypeDeco.scala 38:30]
        when _T_44 : @[InstTypeDeco.scala 38:42]
          io.R <= UInt<1>("h00") @[InstTypeDeco.scala 39:22]
          io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 40:25]
          io.Store <= UInt<1>("h01") @[InstTypeDeco.scala 41:26]
          io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 42:27]
          io.I <= UInt<1>("h00") @[InstTypeDeco.scala 43:22]
          io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 44:24]
          io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 45:25]
          io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 46:24]
          skip @[InstTypeDeco.scala 38:42]
        else : @[InstTypeDeco.scala 48:42]
          node _T_54 = eq(io.opcode, UInt<7>("h063")) @[InstTypeDeco.scala 48:30]
          when _T_54 : @[InstTypeDeco.scala 48:42]
            io.R <= UInt<1>("h00") @[InstTypeDeco.scala 49:22]
            io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 50:25]
            io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 51:26]
            io.Branch <= UInt<1>("h01") @[InstTypeDeco.scala 52:27]
            io.I <= UInt<1>("h00") @[InstTypeDeco.scala 53:22]
            io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 54:24]
            io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 55:25]
            io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 56:24]
            skip @[InstTypeDeco.scala 48:42]
          else : @[InstTypeDeco.scala 58:42]
            node _T_64 = eq(io.opcode, UInt<5>("h013")) @[InstTypeDeco.scala 58:30]
            when _T_64 : @[InstTypeDeco.scala 58:42]
              io.R <= UInt<1>("h00") @[InstTypeDeco.scala 59:22]
              io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 60:25]
              io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 61:26]
              io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 62:27]
              io.I <= UInt<1>("h01") @[InstTypeDeco.scala 63:22]
              io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 64:24]
              io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 65:25]
              io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 66:24]
              skip @[InstTypeDeco.scala 58:42]
            else : @[InstTypeDeco.scala 68:42]
              node _T_74 = eq(io.opcode, UInt<7>("h067")) @[InstTypeDeco.scala 68:30]
              when _T_74 : @[InstTypeDeco.scala 68:42]
                io.R <= UInt<1>("h00") @[InstTypeDeco.scala 69:22]
                io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 70:25]
                io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 71:26]
                io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 72:27]
                io.I <= UInt<1>("h00") @[InstTypeDeco.scala 73:22]
                io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 74:24]
                io.Jalr <= UInt<1>("h01") @[InstTypeDeco.scala 75:25]
                io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 76:24]
                skip @[InstTypeDeco.scala 68:42]
              else : @[InstTypeDeco.scala 78:42]
                node _T_84 = eq(io.opcode, UInt<7>("h06f")) @[InstTypeDeco.scala 78:30]
                when _T_84 : @[InstTypeDeco.scala 78:42]
                  io.R <= UInt<1>("h00") @[InstTypeDeco.scala 79:22]
                  io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 80:25]
                  io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 81:26]
                  io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 82:27]
                  io.I <= UInt<1>("h00") @[InstTypeDeco.scala 83:22]
                  io.Jal <= UInt<1>("h01") @[InstTypeDeco.scala 84:24]
                  io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 85:25]
                  io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 86:24]
                  skip @[InstTypeDeco.scala 78:42]
                else : @[InstTypeDeco.scala 88:42]
                  node _T_94 = eq(io.opcode, UInt<6>("h037")) @[InstTypeDeco.scala 88:30]
                  when _T_94 : @[InstTypeDeco.scala 88:42]
                    io.R <= UInt<1>("h00") @[InstTypeDeco.scala 89:22]
                    io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 90:25]
                    io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 91:26]
                    io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 92:27]
                    io.I <= UInt<1>("h00") @[InstTypeDeco.scala 93:22]
                    io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 94:24]
                    io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 95:25]
                    io.Lui <= UInt<1>("h01") @[InstTypeDeco.scala 96:24]
                    skip @[InstTypeDeco.scala 88:42]
                  else : @[InstTypeDeco.scala 98:20]
                    io.R <= UInt<1>("h00") @[InstTypeDeco.scala 99:22]
                    io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 100:25]
                    io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 101:26]
                    io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 102:27]
                    io.I <= UInt<1>("h00") @[InstTypeDeco.scala 103:22]
                    io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 104:24]
                    io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 105:25]
                    io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 106:24]
                    skip @[InstTypeDeco.scala 98:20]
    
  module CntrlDecode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip R : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip Branch1 : UInt<1>, flip I : UInt<1>, flip Jal : UInt<1>, flip Jalr : UInt<1>, flip Lui : UInt<1>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, AluOp : UInt<3>, OpA : UInt<2>, OpB : UInt<1>, ExtSel : UInt<2>, NextPc : UInt<2>}
    
    node _T_42 = eq(io.R, UInt<1>("h01")) @[CntrlDecode.scala 27:20]
    when _T_42 : @[CntrlDecode.scala 27:31]
      io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 28:29]
      io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 29:27]
      io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 30:28]
      io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 31:29]
      io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 32:29]
      io.AluOp <= UInt<1>("h00") @[CntrlDecode.scala 33:26]
      io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 34:24]
      io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 35:24]
      io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 36:27]
      io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 37:27]
      skip @[CntrlDecode.scala 27:31]
    else : @[CntrlDecode.scala 39:39]
      node _T_54 = eq(io.Load, UInt<1>("h01")) @[CntrlDecode.scala 39:28]
      when _T_54 : @[CntrlDecode.scala 39:39]
        io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 40:29]
        io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 41:27]
        io.MemRead <= UInt<1>("h01") @[CntrlDecode.scala 42:28]
        io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 43:29]
        io.MemtoReg <= UInt<1>("h01") @[CntrlDecode.scala 44:29]
        io.AluOp <= UInt<3>("h04") @[CntrlDecode.scala 45:26]
        io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 46:24]
        io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 47:24]
        io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 48:27]
        io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 49:27]
        skip @[CntrlDecode.scala 39:39]
      else : @[CntrlDecode.scala 51:40]
        node _T_66 = eq(io.Store, UInt<1>("h01")) @[CntrlDecode.scala 51:29]
        when _T_66 : @[CntrlDecode.scala 51:40]
          io.MemWrite <= UInt<1>("h01") @[CntrlDecode.scala 52:29]
          io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 53:27]
          io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 54:28]
          io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 55:29]
          io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 56:29]
          io.AluOp <= UInt<3>("h05") @[CntrlDecode.scala 57:26]
          io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 58:24]
          io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 59:24]
          io.ExtSel <= UInt<2>("h02") @[CntrlDecode.scala 60:27]
          io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 61:27]
          skip @[CntrlDecode.scala 51:40]
        else : @[CntrlDecode.scala 63:42]
          node _T_78 = eq(io.Branch1, UInt<1>("h01")) @[CntrlDecode.scala 63:31]
          when _T_78 : @[CntrlDecode.scala 63:42]
            io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 64:29]
            io.Branch <= UInt<1>("h01") @[CntrlDecode.scala 65:27]
            io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 66:28]
            io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 67:29]
            io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 68:29]
            io.AluOp <= UInt<2>("h02") @[CntrlDecode.scala 69:26]
            io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 70:24]
            io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 71:24]
            io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 72:27]
            io.NextPc <= UInt<1>("h01") @[CntrlDecode.scala 73:27]
            skip @[CntrlDecode.scala 63:42]
          else : @[CntrlDecode.scala 75:36]
            node _T_90 = eq(io.I, UInt<1>("h01")) @[CntrlDecode.scala 75:25]
            when _T_90 : @[CntrlDecode.scala 75:36]
              io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 76:29]
              io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 77:27]
              io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 78:28]
              io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 79:29]
              io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 80:29]
              io.AluOp <= UInt<1>("h01") @[CntrlDecode.scala 81:26]
              io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 82:24]
              io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 83:24]
              io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 84:27]
              io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 85:27]
              skip @[CntrlDecode.scala 75:36]
            else : @[CntrlDecode.scala 87:38]
              node _T_102 = eq(io.Jal, UInt<1>("h01")) @[CntrlDecode.scala 87:27]
              when _T_102 : @[CntrlDecode.scala 87:38]
                io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 88:29]
                io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 89:27]
                io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 90:28]
                io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 91:29]
                io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 92:29]
                io.AluOp <= UInt<2>("h03") @[CntrlDecode.scala 93:26]
                io.OpA <= UInt<2>("h02") @[CntrlDecode.scala 94:24]
                io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 95:24]
                io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 96:27]
                io.NextPc <= UInt<2>("h02") @[CntrlDecode.scala 97:27]
                skip @[CntrlDecode.scala 87:38]
              else : @[CntrlDecode.scala 99:39]
                node _T_114 = eq(io.Jalr, UInt<1>("h01")) @[CntrlDecode.scala 99:28]
                when _T_114 : @[CntrlDecode.scala 99:39]
                  io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 100:29]
                  io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 101:27]
                  io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 102:28]
                  io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 103:29]
                  io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 104:29]
                  io.AluOp <= UInt<2>("h03") @[CntrlDecode.scala 105:26]
                  io.OpA <= UInt<2>("h02") @[CntrlDecode.scala 106:24]
                  io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 107:24]
                  io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 108:27]
                  io.NextPc <= UInt<2>("h03") @[CntrlDecode.scala 109:27]
                  skip @[CntrlDecode.scala 99:39]
                else : @[CntrlDecode.scala 111:38]
                  node _T_126 = eq(io.Lui, UInt<1>("h01")) @[CntrlDecode.scala 111:27]
                  when _T_126 : @[CntrlDecode.scala 111:38]
                    io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 112:29]
                    io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 113:27]
                    io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 114:28]
                    io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 115:29]
                    io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 116:29]
                    io.AluOp <= UInt<3>("h06") @[CntrlDecode.scala 117:26]
                    io.OpA <= UInt<2>("h03") @[CntrlDecode.scala 118:24]
                    io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 119:24]
                    io.ExtSel <= UInt<1>("h01") @[CntrlDecode.scala 120:27]
                    io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 121:27]
                    skip @[CntrlDecode.scala 111:38]
                  else : @[CntrlDecode.scala 123:20]
                    io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 124:29]
                    io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 125:27]
                    io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 126:28]
                    io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 127:29]
                    io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 128:29]
                    io.AluOp <= UInt<3>("h07") @[CntrlDecode.scala 129:26]
                    io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 130:24]
                    io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 131:24]
                    io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 132:27]
                    io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 133:27]
                    skip @[CntrlDecode.scala 123:20]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, AluOp : UInt<3>, OpA : UInt<2>, OpB : UInt<1>, ExtSel : UInt<2>, NextPc : UInt<2>}
    
    inst c1 of InstTypeDeco @[Control.scala 20:24]
    c1.clock <= clock
    c1.reset <= reset
    inst c2 of CntrlDecode @[Control.scala 21:24]
    c2.clock <= clock
    c2.reset <= reset
    c1.io.opcode <= io.opcode @[Control.scala 23:22]
    c2.io.R <= c1.io.R @[Control.scala 25:17]
    c2.io.Load <= c1.io.Load @[Control.scala 26:20]
    c2.io.Store <= c1.io.Store @[Control.scala 27:21]
    c2.io.Branch1 <= c1.io.Branch @[Control.scala 28:23]
    c2.io.I <= c1.io.I @[Control.scala 29:17]
    c2.io.Jal <= c1.io.Jal @[Control.scala 30:19]
    c2.io.Jalr <= c1.io.Jalr @[Control.scala 31:20]
    c2.io.Lui <= c1.io.Lui @[Control.scala 32:19]
    io.MemWrite <= c2.io.MemWrite @[Control.scala 34:21]
    io.Branch <= c2.io.Branch @[Control.scala 35:19]
    io.MemRead <= c2.io.MemRead @[Control.scala 36:20]
    io.RegWrite <= c2.io.RegWrite @[Control.scala 37:21]
    io.MemtoReg <= c2.io.MemtoReg @[Control.scala 38:21]
    io.AluOp <= c2.io.AluOp @[Control.scala 39:18]
    io.OpA <= c2.io.OpA @[Control.scala 40:16]
    io.OpB <= c2.io.OpB @[Control.scala 41:16]
    io.ExtSel <= c2.io.ExtSel @[Control.scala 42:19]
    io.NextPc <= c2.io.NextPc @[Control.scala 43:19]
    
  module ImmGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip instruction : UInt<32>, flip pc : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node _T_19 = bits(io.instruction, 31, 25) @[ImmGen.scala 17:42]
    node _T_20 = bits(io.instruction, 11, 7) @[ImmGen.scala 17:64]
    node _T_21 = cat(_T_19, _T_20) @[Cat.scala 30:58]
    node s_imm13 = asSInt(_T_21) @[ImmGen.scala 17:72]
    node _T_22 = bits(s_imm13, 11, 11) @[ImmGen.scala 18:40]
    node _T_23 = bits(_T_22, 0, 0) @[Bitwise.scala 72:15]
    node _T_26 = mux(_T_23, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_27 = asUInt(s_imm13) @[Cat.scala 30:58]
    node _T_28 = cat(_T_26, _T_27) @[Cat.scala 30:58]
    node _T_29 = asSInt(_T_28) @[ImmGen.scala 18:55]
    io.s_imm <= _T_29 @[ImmGen.scala 18:18]
    node _T_30 = bits(io.instruction, 31, 31) @[ImmGen.scala 20:43]
    node _T_31 = bits(io.instruction, 7, 7) @[ImmGen.scala 20:62]
    node _T_32 = bits(io.instruction, 30, 25) @[ImmGen.scala 20:80]
    node _T_33 = bits(io.instruction, 11, 8) @[ImmGen.scala 20:102]
    node _T_35 = cat(_T_33, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_36 = cat(_T_30, _T_31) @[Cat.scala 30:58]
    node _T_37 = cat(_T_36, _T_32) @[Cat.scala 30:58]
    node _T_38 = cat(_T_37, _T_35) @[Cat.scala 30:58]
    node sb_imm13 = asSInt(_T_38) @[ImmGen.scala 20:117]
    node _T_39 = bits(sb_imm13, 12, 12) @[ImmGen.scala 21:43]
    node _T_40 = bits(_T_39, 0, 0) @[Bitwise.scala 72:15]
    node _T_43 = mux(_T_40, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_44 = asUInt(sb_imm13) @[Cat.scala 30:58]
    node _T_45 = cat(_T_43, _T_44) @[Cat.scala 30:58]
    node _T_46 = asSInt(_T_45) @[ImmGen.scala 21:60]
    node _T_47 = asSInt(io.pc) @[ImmGen.scala 21:75]
    node _T_48 = add(_T_46, _T_47) @[ImmGen.scala 21:67]
    node _T_49 = tail(_T_48, 1) @[ImmGen.scala 21:67]
    node _T_50 = asSInt(_T_49) @[ImmGen.scala 21:67]
    io.sb_imm <= _T_50 @[ImmGen.scala 21:19]
    node _T_51 = bits(io.instruction, 31, 31) @[ImmGen.scala 23:43]
    node _T_52 = bits(io.instruction, 19, 12) @[ImmGen.scala 23:62]
    node _T_53 = bits(io.instruction, 20, 20) @[ImmGen.scala 23:84]
    node _T_54 = bits(io.instruction, 30, 21) @[ImmGen.scala 23:103]
    node _T_56 = cat(_T_54, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_57 = cat(_T_51, _T_52) @[Cat.scala 30:58]
    node _T_58 = cat(_T_57, _T_53) @[Cat.scala 30:58]
    node _T_59 = cat(_T_58, _T_56) @[Cat.scala 30:58]
    node uj_imm21 = asSInt(_T_59) @[ImmGen.scala 23:119]
    node _T_60 = bits(uj_imm21, 20, 20) @[ImmGen.scala 24:43]
    node _T_61 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_61, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_65 = asUInt(uj_imm21) @[Cat.scala 30:58]
    node _T_66 = cat(_T_64, _T_65) @[Cat.scala 30:58]
    node _T_67 = asSInt(_T_66) @[ImmGen.scala 24:60]
    node _T_68 = asSInt(io.pc) @[ImmGen.scala 24:75]
    node _T_69 = add(_T_67, _T_68) @[ImmGen.scala 24:67]
    node _T_70 = tail(_T_69, 1) @[ImmGen.scala 24:67]
    node _T_71 = asSInt(_T_70) @[ImmGen.scala 24:67]
    io.uj_imm <= _T_71 @[ImmGen.scala 24:19]
    node _T_72 = bits(io.instruction, 31, 31) @[ImmGen.scala 26:48]
    node _T_73 = bits(_T_72, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_73, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = bits(io.instruction, 31, 12) @[ImmGen.scala 26:68]
    node _T_78 = cat(_T_76, _T_77) @[Cat.scala 30:58]
    node _T_80 = dshl(_T_78, UInt<4>("h0c")) @[ImmGen.scala 26:77]
    node _T_81 = asSInt(_T_80) @[ImmGen.scala 26:86]
    io.u_imm <= _T_81 @[ImmGen.scala 26:18]
    node _T_82 = bits(io.instruction, 31, 31) @[ImmGen.scala 28:47]
    node _T_83 = bits(_T_82, 0, 0) @[Bitwise.scala 72:15]
    node _T_86 = mux(_T_83, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_87 = bits(io.instruction, 31, 20) @[ImmGen.scala 28:67]
    node _T_88 = cat(_T_86, _T_87) @[Cat.scala 30:58]
    node _T_89 = asSInt(_T_88) @[ImmGen.scala 28:76]
    io.i_imm <= _T_89 @[ImmGen.scala 28:18]
    
  module registerfile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip regwrite : UInt<1>, flip rd : UInt<5>, flip rs1s : UInt<5>, flip rs2s : UInt<5>, flip writedata : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg register : SInt<32>[32], clock @[registerfile.scala 13:27]
    register[0] <= asSInt(UInt<1>("h00")) @[registerfile.scala 14:21]
    io.rs1 <= register[io.rs1s] @[registerfile.scala 15:16]
    io.rs2 <= register[io.rs2s] @[registerfile.scala 16:16]
    node _T_60 = eq(io.regwrite, UInt<1>("h01")) @[registerfile.scala 17:26]
    when _T_60 : @[registerfile.scala 17:35]
      node _T_62 = eq(io.rd, UInt<1>("h00")) @[registerfile.scala 18:44]
      when _T_62 : @[registerfile.scala 18:59]
        register[0] <= asSInt(UInt<1>("h00")) @[registerfile.scala 19:53]
        skip @[registerfile.scala 18:59]
      else : @[registerfile.scala 20:44]
        register[io.rd] <= io.writedata @[registerfile.scala 21:57]
        skip @[registerfile.scala 20:44]
      skip @[registerfile.scala 17:35]
    
  module ALUcont : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ALUop : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, ALUcont : UInt<5>}
    
    node _T_14 = eq(io.ALUop, UInt<1>("h00")) @[ALUcont.scala 13:23]
    when _T_14 : @[ALUcont.scala 13:36]
      node _T_16 = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _T_17 = cat(_T_16, io.func3) @[Cat.scala 30:58]
      io.ALUcont <= _T_17 @[ALUcont.scala 14:28]
      skip @[ALUcont.scala 13:36]
    else : @[ALUcont.scala 15:43]
      node _T_19 = eq(io.ALUop, UInt<1>("h01")) @[ALUcont.scala 15:29]
      when _T_19 : @[ALUcont.scala 15:43]
        node _T_21 = eq(io.func3, UInt<3>("h05")) @[ALUcont.scala 16:31]
        when _T_21 : @[ALUcont.scala 16:44]
          node _T_23 = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
          node _T_24 = cat(_T_23, io.func3) @[Cat.scala 30:58]
          io.ALUcont <= _T_24 @[ALUcont.scala 17:36]
          skip @[ALUcont.scala 16:44]
        else : @[ALUcont.scala 18:28]
          node _T_26 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
          io.ALUcont <= _T_26 @[ALUcont.scala 19:36]
          skip @[ALUcont.scala 18:28]
        skip @[ALUcont.scala 15:43]
      else : @[ALUcont.scala 22:65]
        node _T_28 = eq(io.ALUop, UInt<3>("h05")) @[ALUcont.scala 22:29]
        node _T_30 = eq(io.ALUop, UInt<3>("h04")) @[ALUcont.scala 22:53]
        node _T_31 = or(_T_28, _T_30) @[ALUcont.scala 22:41]
        when _T_31 : @[ALUcont.scala 22:65]
          io.ALUcont <= UInt<1>("h00") @[ALUcont.scala 23:28]
          skip @[ALUcont.scala 22:65]
        else : @[ALUcont.scala 24:42]
          node _T_34 = eq(io.ALUop, UInt<2>("h03")) @[ALUcont.scala 24:29]
          when _T_34 : @[ALUcont.scala 24:42]
            io.ALUcont <= UInt<5>("h01f") @[ALUcont.scala 25:28]
            skip @[ALUcont.scala 24:42]
          else : @[ALUcont.scala 26:42]
            node _T_37 = eq(io.ALUop, UInt<2>("h02")) @[ALUcont.scala 26:29]
            when _T_37 : @[ALUcont.scala 26:42]
              node _T_39 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
              io.ALUcont <= _T_39 @[ALUcont.scala 27:28]
              skip @[ALUcont.scala 26:42]
            else : @[ALUcont.scala 28:20]
              io.ALUcont is invalid @[ALUcont.scala 29:28]
              skip @[ALUcont.scala 28:20]
    
  module jalr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<32>, flip b : SInt<32>, o : SInt<32>}
    
    node _T_11 = add(io.a, io.b) @[jalr.scala 10:24]
    node _T_12 = tail(_T_11, 1) @[jalr.scala 10:24]
    node add = asSInt(_T_12) @[jalr.scala 10:24]
    node _T_14 = and(add, asSInt(UInt<33>("h0fffffffe"))) @[jalr.scala 11:21]
    node _T_15 = asSInt(_T_14) @[jalr.scala 11:21]
    io.o <= _T_15 @[jalr.scala 11:14]
    
  module Alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip AluControl : UInt<5>, flip in1 : SInt<32>, flip in2 : SInt<32>, Branch : UInt<1>, out : SInt<32>}
    
    node _T_16 = eq(io.AluControl, UInt<1>("h00")) @[Alu.scala 15:29]
    when _T_16 : @[Alu.scala 15:44]
      node _T_17 = add(io.in1, io.in2) @[Alu.scala 15:62]
      node _T_18 = tail(_T_17, 1) @[Alu.scala 15:62]
      node _T_19 = asSInt(_T_18) @[Alu.scala 15:62]
      io.out <= _T_19 @[Alu.scala 15:52]
      skip @[Alu.scala 15:44]
    else : @[Alu.scala 17:49]
      node _T_21 = eq(io.AluControl, UInt<1>("h01")) @[Alu.scala 17:34]
      when _T_21 : @[Alu.scala 17:49]
        node _T_22 = bits(io.in2, 4, 0) @[Alu.scala 17:76]
        node _T_23 = dshl(io.in1, _T_22) @[Alu.scala 17:67]
        io.out <= _T_23 @[Alu.scala 17:57]
        skip @[Alu.scala 17:49]
      else : @[Alu.scala 19:49]
        node _T_25 = eq(io.AluControl, UInt<3>("h04")) @[Alu.scala 19:34]
        when _T_25 : @[Alu.scala 19:49]
          node _T_26 = xor(io.in1, io.in2) @[Alu.scala 19:67]
          node _T_27 = asSInt(_T_26) @[Alu.scala 19:67]
          io.out <= _T_27 @[Alu.scala 19:57]
          skip @[Alu.scala 19:49]
        else : @[Alu.scala 21:81]
          node _T_29 = eq(io.AluControl, UInt<3>("h05")) @[Alu.scala 21:34]
          node _T_31 = eq(io.AluControl, UInt<4>("h0d")) @[Alu.scala 21:66]
          node _T_32 = or(_T_29, _T_31) @[Alu.scala 21:49]
          when _T_32 : @[Alu.scala 21:81]
            node _T_33 = bits(io.in2, 4, 0) @[Alu.scala 21:108]
            node _T_34 = dshr(io.in1, _T_33) @[Alu.scala 21:99]
            io.out <= _T_34 @[Alu.scala 21:89]
            skip @[Alu.scala 21:81]
          else : @[Alu.scala 23:49]
            node _T_36 = eq(io.AluControl, UInt<3>("h06")) @[Alu.scala 23:34]
            when _T_36 : @[Alu.scala 23:49]
              node _T_37 = or(io.in1, io.in2) @[Alu.scala 23:67]
              node _T_38 = asSInt(_T_37) @[Alu.scala 23:67]
              io.out <= _T_38 @[Alu.scala 23:57]
              skip @[Alu.scala 23:49]
            else : @[Alu.scala 25:49]
              node _T_40 = eq(io.AluControl, UInt<3>("h07")) @[Alu.scala 25:34]
              when _T_40 : @[Alu.scala 25:49]
                node _T_41 = and(io.in1, io.in2) @[Alu.scala 25:67]
                node _T_42 = asSInt(_T_41) @[Alu.scala 25:67]
                io.out <= _T_42 @[Alu.scala 25:57]
                skip @[Alu.scala 25:49]
              else : @[Alu.scala 27:49]
                node _T_44 = eq(io.AluControl, UInt<4>("h08")) @[Alu.scala 27:34]
                when _T_44 : @[Alu.scala 27:49]
                  node _T_45 = sub(io.in1, io.in2) @[Alu.scala 27:67]
                  node _T_46 = tail(_T_45, 1) @[Alu.scala 27:67]
                  node _T_47 = asSInt(_T_46) @[Alu.scala 27:67]
                  io.out <= _T_47 @[Alu.scala 27:57]
                  skip @[Alu.scala 27:49]
                else : @[Alu.scala 29:49]
                  node _T_49 = eq(io.AluControl, UInt<5>("h01f")) @[Alu.scala 29:34]
                  when _T_49 : @[Alu.scala 29:49]
                    io.out <= io.in1 @[Alu.scala 29:57]
                    skip @[Alu.scala 29:49]
                  else : @[Alu.scala 31:49]
                    node _T_51 = eq(io.AluControl, UInt<5>("h015")) @[Alu.scala 31:34]
                    when _T_51 : @[Alu.scala 31:49]
                      node _T_52 = geq(io.in1, io.in2) @[Alu.scala 32:30]
                      when _T_52 : @[Alu.scala 32:40]
                        io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 32:48]
                        skip @[Alu.scala 32:40]
                      else : @[Alu.scala 33:28]
                        io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 33:36]
                        skip @[Alu.scala 33:28]
                      skip @[Alu.scala 31:49]
                    else : @[Alu.scala 35:49]
                      node _T_56 = eq(io.AluControl, UInt<5>("h017")) @[Alu.scala 35:34]
                      when _T_56 : @[Alu.scala 35:49]
                        node _T_57 = asUInt(io.in1) @[Alu.scala 36:30]
                        node _T_58 = asUInt(io.in2) @[Alu.scala 36:47]
                        node _T_59 = geq(_T_57, _T_58) @[Alu.scala 36:37]
                        when _T_59 : @[Alu.scala 36:54]
                          io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 36:62]
                          skip @[Alu.scala 36:54]
                        else : @[Alu.scala 37:28]
                          io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 37:36]
                          skip @[Alu.scala 37:28]
                        skip @[Alu.scala 35:49]
                      else : @[Alu.scala 39:81]
                        node _T_63 = eq(io.AluControl, UInt<2>("h03")) @[Alu.scala 39:34]
                        node _T_65 = eq(io.AluControl, UInt<5>("h016")) @[Alu.scala 39:66]
                        node _T_66 = or(_T_63, _T_65) @[Alu.scala 39:49]
                        when _T_66 : @[Alu.scala 39:81]
                          node _T_67 = asUInt(io.in1) @[Alu.scala 40:30]
                          node _T_68 = asUInt(io.in2) @[Alu.scala 40:46]
                          node _T_69 = lt(_T_67, _T_68) @[Alu.scala 40:37]
                          when _T_69 : @[Alu.scala 40:53]
                            io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 40:61]
                            skip @[Alu.scala 40:53]
                          else : @[Alu.scala 41:28]
                            io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 41:36]
                            skip @[Alu.scala 41:28]
                          skip @[Alu.scala 39:81]
                        else : @[Alu.scala 43:49]
                          node _T_73 = eq(io.AluControl, UInt<5>("h010")) @[Alu.scala 43:34]
                          when _T_73 : @[Alu.scala 43:49]
                            node _T_74 = eq(io.in1, io.in2) @[Alu.scala 44:30]
                            when _T_74 : @[Alu.scala 44:41]
                              io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 44:49]
                              skip @[Alu.scala 44:41]
                            else : @[Alu.scala 45:28]
                              io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 45:36]
                              skip @[Alu.scala 45:28]
                            skip @[Alu.scala 43:49]
                          else : @[Alu.scala 47:81]
                            node _T_78 = eq(io.AluControl, UInt<2>("h02")) @[Alu.scala 47:34]
                            node _T_80 = eq(io.AluControl, UInt<5>("h014")) @[Alu.scala 47:66]
                            node _T_81 = or(_T_78, _T_80) @[Alu.scala 47:49]
                            when _T_81 : @[Alu.scala 47:81]
                              node _T_82 = lt(io.in1, io.in2) @[Alu.scala 48:30]
                              when _T_82 : @[Alu.scala 48:39]
                                io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 48:47]
                                skip @[Alu.scala 48:39]
                              else : @[Alu.scala 49:28]
                                io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 49:36]
                                skip @[Alu.scala 49:28]
                              skip @[Alu.scala 47:81]
                            else : @[Alu.scala 51:49]
                              node _T_86 = eq(io.AluControl, UInt<5>("h011")) @[Alu.scala 51:34]
                              when _T_86 : @[Alu.scala 51:49]
                                node _T_87 = neq(io.in1, io.in2) @[Alu.scala 52:30]
                                when _T_87 : @[Alu.scala 52:40]
                                  io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 52:48]
                                  skip @[Alu.scala 52:40]
                                else : @[Alu.scala 53:28]
                                  io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 53:36]
                                  skip @[Alu.scala 53:28]
                                skip @[Alu.scala 51:49]
                              else : @[Alu.scala 54:20]
                                io.out is invalid @[Alu.scala 54:28]
                                skip @[Alu.scala 54:20]
    node _T_91 = eq(io.out, asSInt(UInt<2>("h01"))) @[Alu.scala 57:22]
    node _T_92 = bits(io.AluControl, 4, 3) @[Alu.scala 57:46]
    node _T_94 = eq(_T_92, UInt<2>("h02")) @[Alu.scala 57:52]
    node _T_95 = and(_T_91, _T_94) @[Alu.scala 57:30]
    when _T_95 : @[Alu.scala 57:64]
      io.Branch <= UInt<1>("h01") @[Alu.scala 57:75]
      skip @[Alu.scala 57:64]
    else : @[Alu.scala 58:20]
      io.Branch <= UInt<1>("h00") @[Alu.scala 58:31]
      skip @[Alu.scala 58:20]
    
  module datamem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip load : UInt<1>, flip store : UInt<1>, flip address : UInt<8>, flip storeData : SInt<32>, dataOut : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[datamem.scala 13:22]
    node _T_18 = eq(io.load, UInt<1>("h01")) @[datamem.scala 14:22]
    when _T_18 : @[datamem.scala 14:30]
      infer mport _T_19 = mem[io.address], clock @[datamem.scala 15:34]
      io.dataOut <= _T_19 @[datamem.scala 15:28]
      skip @[datamem.scala 14:30]
    else : @[datamem.scala 16:20]
      io.dataOut is invalid @[datamem.scala 17:28]
      skip @[datamem.scala 16:20]
    node _T_21 = eq(io.store, UInt<1>("h01")) @[datamem.scala 19:23]
    when _T_21 : @[datamem.scala 19:31]
      infer mport _T_22 = mem[io.address], clock @[datamem.scala 20:20]
      _T_22 <= io.storeData @[datamem.scala 20:33]
      skip @[datamem.scala 19:31]
    else : @[datamem.scala 21:20]
      io.dataOut is invalid @[datamem.scala 22:28]
      skip @[datamem.scala 21:20]
    
  module top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {output : SInt<32>}
    
    inst pc of pc @[top.scala 9:25]
    pc.clock <= clock
    pc.reset <= reset
    inst insmem of insmem @[top.scala 10:29]
    insmem.clock <= clock
    insmem.reset <= reset
    inst control of Control @[top.scala 11:30]
    control.clock <= clock
    control.reset <= reset
    inst immediategen of ImmGen @[top.scala 12:35]
    immediategen.clock <= clock
    immediategen.reset <= reset
    inst regfile of registerfile @[top.scala 13:30]
    regfile.clock <= clock
    regfile.reset <= reset
    inst alucontrol of ALUcont @[top.scala 14:33]
    alucontrol.clock <= clock
    alucontrol.reset <= reset
    inst jalr of jalr @[top.scala 15:27]
    jalr.clock <= clock
    jalr.reset <= reset
    inst alu of Alu @[top.scala 16:26]
    alu.clock <= clock
    alu.reset <= reset
    inst dataMem of datamem @[top.scala 17:29]
    dataMem.clock <= clock
    dataMem.reset <= reset
    pc.io.input <= pc.io.pc4 @[top.scala 19:21]
    node _T_7 = bits(pc.io.pcout, 11, 2) @[top.scala 21:41]
    insmem.io.address <= _T_7 @[top.scala 21:27]
    node _T_8 = bits(insmem.io.data, 6, 0) @[top.scala 23:44]
    control.io.opcode <= _T_8 @[top.scala 23:27]
    immediategen.io.pc <= pc.io.pcout @[top.scala 25:28]
    immediategen.io.instruction <= insmem.io.data @[top.scala 26:37]
    regfile.io.regwrite <= control.io.RegWrite @[top.scala 28:29]
    node _T_9 = bits(insmem.io.data, 11, 7) @[top.scala 29:40]
    regfile.io.rd <= _T_9 @[top.scala 29:23]
    node _T_10 = bits(insmem.io.data, 19, 15) @[top.scala 30:42]
    regfile.io.rs1s <= _T_10 @[top.scala 30:25]
    node _T_11 = bits(insmem.io.data, 24, 20) @[top.scala 31:42]
    regfile.io.rs2s <= _T_11 @[top.scala 31:25]
    alucontrol.io.ALUop <= control.io.AluOp @[top.scala 33:29]
    node _T_12 = bits(insmem.io.data, 14, 12) @[top.scala 34:45]
    alucontrol.io.func3 <= _T_12 @[top.scala 34:29]
    node _T_13 = bits(insmem.io.data, 30, 30) @[top.scala 35:45]
    alucontrol.io.func7 <= _T_13 @[top.scala 35:29]
    node _T_15 = eq(control.io.OpB, UInt<1>("h01")) @[top.scala 38:30]
    when _T_15 : @[top.scala 38:38]
      jalr.io.a <= immediategen.io.i_imm @[top.scala 39:28]
      skip @[top.scala 38:38]
    else : @[top.scala 40:20]
      jalr.io.a is invalid @[top.scala 41:27]
      skip @[top.scala 40:20]
    jalr.io.b <= regfile.io.rs1 @[top.scala 43:19]
    alu.io.AluControl <= alucontrol.io.ALUcont @[top.scala 46:27]
    node _T_17 = eq(control.io.OpA, UInt<1>("h00")) @[top.scala 49:30]
    when _T_17 : @[top.scala 49:38]
      alu.io.in1 <= regfile.io.rs1 @[top.scala 50:28]
      skip @[top.scala 49:38]
    else : @[top.scala 51:43]
      node _T_19 = eq(control.io.OpA, UInt<2>("h02")) @[top.scala 51:35]
      when _T_19 : @[top.scala 51:43]
        node _T_20 = asSInt(pc.io.pc4) @[top.scala 52:47]
        alu.io.in1 <= _T_20 @[top.scala 52:28]
        skip @[top.scala 51:43]
      else : @[top.scala 53:43]
        node _T_22 = eq(control.io.OpA, UInt<2>("h03")) @[top.scala 53:35]
        when _T_22 : @[top.scala 53:43]
          alu.io.in1 <= regfile.io.rs1 @[top.scala 54:28]
          skip @[top.scala 53:43]
        else : @[top.scala 55:20]
          alu.io.in1 is invalid @[top.scala 56:28]
          skip @[top.scala 55:20]
    node _T_24 = eq(control.io.OpB, UInt<1>("h00")) @[top.scala 60:29]
    when _T_24 : @[top.scala 60:37]
      alu.io.in2 <= regfile.io.rs2 @[top.scala 61:28]
      skip @[top.scala 60:37]
    else : @[top.scala 62:43]
      node _T_26 = eq(control.io.OpB, UInt<1>("h01")) @[top.scala 62:35]
      when _T_26 : @[top.scala 62:43]
        node _T_28 = eq(control.io.ExtSel, UInt<1>("h00")) @[top.scala 64:41]
        when _T_28 : @[top.scala 64:49]
          alu.io.in2 <= immediategen.io.i_imm @[top.scala 65:36]
          skip @[top.scala 64:49]
        else : @[top.scala 66:55]
          node _T_30 = eq(control.io.ExtSel, UInt<1>("h01")) @[top.scala 66:47]
          when _T_30 : @[top.scala 66:55]
            alu.io.in2 <= immediategen.io.u_imm @[top.scala 67:44]
            skip @[top.scala 66:55]
          else : @[top.scala 68:55]
            node _T_32 = eq(control.io.ExtSel, UInt<2>("h02")) @[top.scala 68:47]
            when _T_32 : @[top.scala 68:55]
              alu.io.in2 <= immediategen.io.s_imm @[top.scala 69:36]
              skip @[top.scala 68:55]
            else : @[top.scala 70:29]
              alu.io.in2 is invalid @[top.scala 71:36]
              skip @[top.scala 70:29]
        skip @[top.scala 62:43]
      else : @[top.scala 73:20]
        alu.io.in2 is invalid @[top.scala 74:28]
        skip @[top.scala 73:20]
    node _T_33 = bits(alu.io.out, 9, 2) @[top.scala 78:42]
    dataMem.io.address <= _T_33 @[top.scala 78:28]
    dataMem.io.storeData <= regfile.io.rs2 @[top.scala 79:30]
    dataMem.io.store <= control.io.MemWrite @[top.scala 80:26]
    dataMem.io.load <= control.io.MemRead @[top.scala 81:25]
    node _T_35 = eq(control.io.MemtoReg, UInt<1>("h00")) @[top.scala 83:34]
    when _T_35 : @[top.scala 83:42]
      regfile.io.writedata <= alu.io.out @[top.scala 84:38]
      skip @[top.scala 83:42]
    else : @[top.scala 85:43]
      node _T_37 = eq(control.io.OpB, UInt<1>("h01")) @[top.scala 85:35]
      when _T_37 : @[top.scala 85:43]
        regfile.io.writedata <= dataMem.io.dataOut @[top.scala 86:38]
        skip @[top.scala 85:43]
      else : @[top.scala 87:20]
        regfile.io.writedata is invalid @[top.scala 88:38]
        skip @[top.scala 87:20]
    node _T_39 = eq(control.io.NextPc, UInt<1>("h00")) @[top.scala 93:33]
    when _T_39 : @[top.scala 93:41]
      pc.io.input <= pc.io.pc4 @[top.scala 94:29]
      skip @[top.scala 93:41]
    else : @[top.scala 95:46]
      node _T_41 = eq(control.io.NextPc, UInt<1>("h01")) @[top.scala 95:38]
      when _T_41 : @[top.scala 95:46]
        node _T_42 = and(alu.io.Branch, control.io.Branch) @[top.scala 96:39]
        node _T_44 = eq(_T_42, UInt<1>("h00")) @[top.scala 96:60]
        when _T_44 : @[top.scala 96:69]
          pc.io.input <= pc.io.pc4 @[top.scala 97:37]
          skip @[top.scala 96:69]
        else : @[top.scala 98:73]
          node _T_45 = and(alu.io.Branch, control.io.Branch) @[top.scala 98:44]
          node _T_47 = eq(_T_45, UInt<1>("h01")) @[top.scala 98:65]
          when _T_47 : @[top.scala 98:73]
            node _T_48 = asUInt(immediategen.io.sb_imm) @[top.scala 99:63]
            pc.io.input <= _T_48 @[top.scala 99:37]
            skip @[top.scala 98:73]
          else : @[top.scala 100:29]
            pc.io.input is invalid @[top.scala 101:37]
            skip @[top.scala 100:29]
        skip @[top.scala 95:46]
      else : @[top.scala 103:47]
        node _T_50 = eq(control.io.NextPc, UInt<2>("h02")) @[top.scala 103:39]
        when _T_50 : @[top.scala 103:47]
          node _T_51 = asUInt(immediategen.io.uj_imm) @[top.scala 104:55]
          pc.io.input <= _T_51 @[top.scala 104:29]
          skip @[top.scala 103:47]
        else : @[top.scala 105:46]
          node _T_53 = eq(control.io.NextPc, UInt<2>("h03")) @[top.scala 105:38]
          when _T_53 : @[top.scala 105:46]
            node _T_54 = asUInt(jalr.io.o) @[top.scala 106:47]
            pc.io.input <= _T_54 @[top.scala 106:28]
            skip @[top.scala 105:46]
          else : @[top.scala 107:20]
            pc.io.input is invalid @[top.scala 108:28]
            skip @[top.scala 107:20]
    io.output <= alu.io.out @[top.scala 111:19]
    
